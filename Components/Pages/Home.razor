@page "/"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<Authorized> 
    <div class="nav-item px-3">
        <form action="Account/Logout" method="post">
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
            <button type="submit" class="nav-link">
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
            </button>
        </form>
    </div>
</Authorized>

@code {
    private string? currentUrl;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Redirect if the user is not authenticated
        if (user == null || !user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
    } 

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}