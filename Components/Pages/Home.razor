@page "/"

@using chatapp_blazor.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DataDbContext DataDbContext
@inject UserManager<User> UserManager
@inject IJSRuntime JsRuntime

<PageTitle>Home</PageTitle>
 
<aside id="default-sidebar" class="fixed top-0 left-0 z-40 w-full md:w-96 lg:w-96 h-screen -translate-x-full sm:translate-x-0" aria-label="Sidebar">
    <section class="flex flex-col antialiased bg-gray-50 text-gray-600 h-full">
        <div class="relative pt-6 pb-4 px-4 border-b border-gray-200 bg-white shadow">
            <div class="flex justify-between items-center"> 
                <div class="flex items-center">
                    <a class="inline-flex items-start mr-3" href="#">
                        <img class="rounded-full" src="/assets/personiconyellow.png" width="48" height="48" alt="Lauren Marsano" />
                    </a>
                    <div class="pr-1">
                        <a class="inline-flex text-gray-800 hover:text-gray-900" href="#">
                            <h2 class="text-xl leading-snug font-bold">@_currentUser?.Name</h2>
                        </a>
                        <a class="block text-sm font-medium hover:text-indigo-500" href="#">@_currentUser?.Email</a>
                    </div>
                </div> 
                <div class="nav-item px-3">
                    <form action="/Account/Logout" method="post">
                        <AntiforgeryToken/>
                        <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                        <button type="submit" class="text-gray-400 hover:text-gray-500 rounded-full focus:ring-0 outline-none focus:outline-none">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </div>  
        </div>
        <div class="relative w-full mx-auto overflow-auto h-[100dvh] bg-white shadow ">
            <div class="py-3 px-4">
                <h3 class="text-xs font-semibold uppercase text-gray-400 mb-1">Chats</h3>
                <div class="divide-y pb-6 h-full divide-gray-200">
                    @foreach (var user in _users.Where(user => user.Id != _currentUser?.Id))
                    {
                        <button @onclick="(() => OnUserClick(user.Id))" class="w-full text-left py-2 focus:outline-none focus-visible:bg-indigo-50 hover:bg-gray-200 p-1">
                            <div class="flex items-center">
                                <img class="hidden rounded-full items-start flex-shrink-0 mr-3" src="/assets/personiconblack.png" width="32" height="32" alt="Nhu Cassel"/>
                                <div class="relative">
                                    <img class="w-10 h-10 rounded-full mr-3" src="/assets/personiconblack.png" alt="personiconblack">
                                    <span id="@user.Id-online-status" class="bottom-0 left-7 absolute  w-3.5 h-3.5 bg-red-400 border-2 border-white dark:border-gray-800 rounded-full"></span>
                                </div>
                                <div>
                                    <h4 class="text-sm font-semibold text-gray-900">@user.Name</h4>
                                    <div class="text-[13px]">Hello Lauren 👋, · 24 Mar</div>
                                </div>
                            </div>
                        </button>
                    }
                </div>
            </div>
        </div> 
    </section>
</aside>

<div class="sm:ml-96">
    <div class="bg-white h-[100dvh] flex flex-col max-w-full mx-auto">
        <div class="bg-black p-3 text-white flex justify-between items-center">
            <div class="flex items-center gap-3">
                <button id="default-sidebar-btn" data-drawer-target="default-sidebar" data-drawer-toggle="default-sidebar" aria-controls="default-sidebar" type="button" class="inline-flex items-center p-2 mt-2 text-sm text-gray-500 rounded-lg sm:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600">
                    <span class="sr-only">Open sidebar</span>
                    <svg class="w-6 h-6 text-white dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12l4-4m-4 4 4 4"/>
                    </svg>
                </button>
                <div class="flex items-center">
                    <img class="rounded-full items-start flex-shrink-0 mr-2" src="/assets/personiconblack.png" width="32" height="32" alt="Nhu Cassel"/>
                    <span>@_targetUser?.Name</span>
                </div>
            </div>
        </div>
        @if (_targetUser != null)
        {
            <div class="flex-1 overflow-y-auto p-4">
                <div class="flex flex-col space-y-2">
                    @foreach (var message in _messages)
                    {
                        if (message.SenderId == _currentUser?.Id)
                        {
                            <div class="flex justify-end">
                                <div class="bg-blue-500 text-white p-2.5 rounded-lg max-w-xs border">
                                    @message.Content
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-end">
                                <img class="rounded-full items-start flex-shrink-0 mr-2 object-fit-contain" src="/assets/personiconblack.png" width="32" height="32" alt="Nhu Cassel"/>
                                <div class="bg-white text-black p-2.5 rounded-lg max-w-xs border">
                                    @message.Content
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        }
        else
        {
            <div class="flex-1 overflow-y-auto p-4"></div>
        }
        <div class="bg-white p-3 flex items-center border-top">
            <input value="@_content" @oninput="OnMessageInput" type="text" placeholder="Type your message..." class="flex-1 border rounded px-4 py-2 focus:outline-none">
            <button @onclick="OnSendButtonClick" class="bg-blue-500 text-white rounded-full p-2 ml-2 hover:bg-blue-600 focus:outline-none">
                <svg width="20px" height="20px" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M11.5003 12H5.41872M5.24634 12.7972L4.24158 15.7986C3.69128 17.4424 3.41613 18.2643 3.61359 18.7704C3.78506 19.21 4.15335 19.5432 4.6078 19.6701C5.13111 19.8161 5.92151 19.4604 7.50231 18.7491L17.6367 14.1886C19.1797 13.4942 19.9512 13.1471 20.1896 12.6648C20.3968 12.2458 20.3968 11.7541 20.1896 11.3351C19.9512 10.8529 19.1797 10.5057 17.6367 9.81135L7.48483 5.24303C5.90879 4.53382 5.12078 4.17921 4.59799 4.32468C4.14397 4.45101 3.77572 4.78336 3.60365 5.22209C3.40551 5.72728 3.67772 6.54741 4.22215 8.18767L5.24829 11.2793C5.34179 11.561 5.38855 11.7019 5.407 11.8459C5.42338 11.9738 5.42321 12.1032 5.40651 12.231C5.38768 12.375 5.34057 12.5157 5.24634 12.7972Z" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
            </button>
        </div>
    </div>
</div>

@code {
    private string? _currentUrl;
    private string? _content;
    private User? _currentUser;
    private User? _targetUser;
    private List<User> _users = [];
    private List<Message> _messages = [];
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
        } 
        
        _users = await UserManager.Users.ToListAsync(); 
        _currentUser = _users.Find(u => u.Email == user?.Identity?.Name);
        
        NavigationManager.LocationChanged += OnLocationChanged;
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        StateHasChanged();
    }   
    
    protected override async Task OnAfterRenderAsync(bool isFirstRender) 
    {
        if (isFirstRender && _currentUser != null)
        {
            await JsRuntime.InvokeVoidAsync("initializeFlowbite", DotNetObjectReference.Create(this));
            await JsRuntime.InvokeVoidAsync("initHubConnection", _currentUser.Id);
        }
    } 

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private void OnMessageInput(ChangeEventArgs args)
    {
        _content = args.Value?.ToString() ?? string.Empty;
    }
    
    private async Task OnSendButtonClick()
    {
        if (_currentUser != null && _targetUser != null)
        { 
            await JsRuntime.InvokeVoidAsync("sendMessage", _currentUser.Id, _targetUser.Id, _content);
            
            var message = new Message
            {
                SenderId = _currentUser.Id,
                ReceiverId = _targetUser.Id,
                Content = _content ?? string.Empty,
                Timestamp = DateTime.Now
            };
            
            await DataDbContext.Messages.AddAsync(message);
            await DataDbContext.SaveChangesAsync();
            await UpdateMessages();
            
            _content = string.Empty; 
        }
    }

    private async Task OnUserClick(string id)
    {
        _targetUser = _users.Find(u => u.Id == id);
        if (_currentUser != null && _targetUser != null)
        {
            await UpdateMessages();
        }
        await JsRuntime.InvokeVoidAsync("onSidebarUserClick");
    }
    
    [JSInvokable]
    public async Task UpdateMessages()
    {
        if (_currentUser != null && _targetUser != null)
        {
            _messages = await DataDbContext.Messages
                .Where(m => (m.SenderId == _currentUser.Id && m.ReceiverId == _targetUser.Id) 
                            || (m.SenderId == _targetUser.Id && m.ReceiverId == _currentUser.Id))
                .ToListAsync();
            
            StateHasChanged();
        }
    } 
}